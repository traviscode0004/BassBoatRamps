""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input LakeImageRelateToManyInput {
  create: [LakeImageCreateInput]
  connect: [LakeImageWhereUniqueInput]
  disconnect: [LakeImageWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Lake {
  id: ID!
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  description: String
  photo(where: LakeImageWhereInput, search: String, sortBy: [SortLakeImagesBy!], orderBy: String, first: Int, skip: Int): [LakeImage!]!
  _photoMeta(where: LakeImageWhereInput, search: String, sortBy: [SortLakeImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  largemouth: Boolean
  smallmouth: Boolean
  spotted: Boolean
}

input LakeWhereInput {
  AND: [LakeWhereInput]
  OR: [LakeWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
  address2: String
  address2_not: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  address2_i: String
  address2_not_i: String
  address2_contains_i: String
  address2_not_contains_i: String
  address2_starts_with_i: String
  address2_not_starts_with_i: String
  address2_ends_with_i: String
  address2_not_ends_with_i: String
  address2_in: [String]
  address2_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_i: String
  city_not_i: String
  city_contains_i: String
  city_not_contains_i: String
  city_starts_with_i: String
  city_not_starts_with_i: String
  city_ends_with_i: String
  city_not_ends_with_i: String
  city_in: [String]
  city_not_in: [String]
  state: String
  state_not: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  state_i: String
  state_not_i: String
  state_contains_i: String
  state_not_contains_i: String
  state_starts_with_i: String
  state_not_starts_with_i: String
  state_ends_with_i: String
  state_not_ends_with_i: String
  state_in: [String]
  state_not_in: [String]
  zip: String
  zip_not: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  zip_i: String
  zip_not_i: String
  zip_contains_i: String
  zip_not_contains_i: String
  zip_starts_with_i: String
  zip_not_starts_with_i: String
  zip_ends_with_i: String
  zip_not_ends_with_i: String
  zip_in: [String]
  zip_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """ condition must be true for all nodes """
  photo_every: LakeImageWhereInput

  """ condition must be true for at least 1 node """
  photo_some: LakeImageWhereInput

  """ condition must be false for all nodes """
  photo_none: LakeImageWhereInput
  largemouth: Boolean
  largemouth_not: Boolean
  smallmouth: Boolean
  smallmouth_not: Boolean
  spotted: Boolean
  spotted_not: Boolean
}

input LakeWhereUniqueInput {
  id: ID!
}

enum SortLakesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  description_ASC
  description_DESC
  photo_ASC
  photo_DESC
  largemouth_ASC
  largemouth_DESC
  smallmouth_ASC
  smallmouth_DESC
  spotted_ASC
  spotted_DESC
}

input LakeUpdateInput {
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  description: String
  photo: LakeImageRelateToManyInput
  largemouth: Boolean
  smallmouth: Boolean
  spotted: Boolean
}

input LakesUpdateInput {
  id: ID!
  data: LakeUpdateInput
}

input LakeCreateInput {
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  description: String
  photo: LakeImageRelateToManyInput
  largemouth: Boolean
  smallmouth: Boolean
  spotted: Boolean
}

input LakesCreateInput {
  data: LakeCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input LakeRelateToOneInput {
  create: LakeCreateInput
  connect: LakeWhereUniqueInput
  disconnect: LakeWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type LakeImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  lake: Lake
}

input LakeImageWhereInput {
  AND: [LakeImageWhereInput]
  OR: [LakeImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  lake: LakeWhereInput
  lake_is_null: Boolean
}

input LakeImageWhereUniqueInput {
  id: ID!
}

enum SortLakeImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  lake_ASC
  lake_DESC
}

input LakeImageUpdateInput {
  image: Upload
  altText: String
  lake: LakeRelateToOneInput
}

input LakeImagesUpdateInput {
  id: ID!
  data: LakeImageUpdateInput
}

input LakeImageCreateInput {
  image: Upload
  altText: String
  lake: LakeRelateToOneInput
}

input LakeImagesCreateInput {
  data: LakeImageCreateInput
}

input RampImageRelateToManyInput {
  create: [RampImageCreateInput]
  connect: [RampImageWhereUniqueInput]
  disconnect: [RampImageWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Ramp {
  id: ID!
  lake: Lake
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  costToLaunch: String
  bathrooms: String
  numberOfRamps: Int
  trailerParkingSpots: String
  areTournamentsPremitted: String
  isFourWheelDriveNeeded: String
  extraRampDetails: String
  photo(where: RampImageWhereInput, search: String, sortBy: [SortRampImagesBy!], orderBy: String, first: Int, skip: Int): [RampImage!]!
  _photoMeta(where: RampImageWhereInput, search: String, sortBy: [SortRampImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input RampWhereInput {
  AND: [RampWhereInput]
  OR: [RampWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  lake: LakeWhereInput
  lake_is_null: Boolean
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
  address2: String
  address2_not: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  address2_i: String
  address2_not_i: String
  address2_contains_i: String
  address2_not_contains_i: String
  address2_starts_with_i: String
  address2_not_starts_with_i: String
  address2_ends_with_i: String
  address2_not_ends_with_i: String
  address2_in: [String]
  address2_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_i: String
  city_not_i: String
  city_contains_i: String
  city_not_contains_i: String
  city_starts_with_i: String
  city_not_starts_with_i: String
  city_ends_with_i: String
  city_not_ends_with_i: String
  city_in: [String]
  city_not_in: [String]
  state: String
  state_not: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  state_i: String
  state_not_i: String
  state_contains_i: String
  state_not_contains_i: String
  state_starts_with_i: String
  state_not_starts_with_i: String
  state_ends_with_i: String
  state_not_ends_with_i: String
  state_in: [String]
  state_not_in: [String]
  zip: String
  zip_not: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  zip_i: String
  zip_not_i: String
  zip_contains_i: String
  zip_not_contains_i: String
  zip_starts_with_i: String
  zip_not_starts_with_i: String
  zip_ends_with_i: String
  zip_not_ends_with_i: String
  zip_in: [String]
  zip_not_in: [String]
  costToLaunch: String
  costToLaunch_not: String
  costToLaunch_contains: String
  costToLaunch_not_contains: String
  costToLaunch_starts_with: String
  costToLaunch_not_starts_with: String
  costToLaunch_ends_with: String
  costToLaunch_not_ends_with: String
  costToLaunch_i: String
  costToLaunch_not_i: String
  costToLaunch_contains_i: String
  costToLaunch_not_contains_i: String
  costToLaunch_starts_with_i: String
  costToLaunch_not_starts_with_i: String
  costToLaunch_ends_with_i: String
  costToLaunch_not_ends_with_i: String
  costToLaunch_in: [String]
  costToLaunch_not_in: [String]
  bathrooms: String
  bathrooms_not: String
  bathrooms_contains: String
  bathrooms_not_contains: String
  bathrooms_starts_with: String
  bathrooms_not_starts_with: String
  bathrooms_ends_with: String
  bathrooms_not_ends_with: String
  bathrooms_i: String
  bathrooms_not_i: String
  bathrooms_contains_i: String
  bathrooms_not_contains_i: String
  bathrooms_starts_with_i: String
  bathrooms_not_starts_with_i: String
  bathrooms_ends_with_i: String
  bathrooms_not_ends_with_i: String
  bathrooms_in: [String]
  bathrooms_not_in: [String]
  numberOfRamps: Int
  numberOfRamps_not: Int
  numberOfRamps_lt: Int
  numberOfRamps_lte: Int
  numberOfRamps_gt: Int
  numberOfRamps_gte: Int
  numberOfRamps_in: [Int]
  numberOfRamps_not_in: [Int]
  trailerParkingSpots: String
  trailerParkingSpots_not: String
  trailerParkingSpots_contains: String
  trailerParkingSpots_not_contains: String
  trailerParkingSpots_starts_with: String
  trailerParkingSpots_not_starts_with: String
  trailerParkingSpots_ends_with: String
  trailerParkingSpots_not_ends_with: String
  trailerParkingSpots_i: String
  trailerParkingSpots_not_i: String
  trailerParkingSpots_contains_i: String
  trailerParkingSpots_not_contains_i: String
  trailerParkingSpots_starts_with_i: String
  trailerParkingSpots_not_starts_with_i: String
  trailerParkingSpots_ends_with_i: String
  trailerParkingSpots_not_ends_with_i: String
  trailerParkingSpots_in: [String]
  trailerParkingSpots_not_in: [String]
  areTournamentsPremitted: String
  areTournamentsPremitted_not: String
  areTournamentsPremitted_contains: String
  areTournamentsPremitted_not_contains: String
  areTournamentsPremitted_starts_with: String
  areTournamentsPremitted_not_starts_with: String
  areTournamentsPremitted_ends_with: String
  areTournamentsPremitted_not_ends_with: String
  areTournamentsPremitted_i: String
  areTournamentsPremitted_not_i: String
  areTournamentsPremitted_contains_i: String
  areTournamentsPremitted_not_contains_i: String
  areTournamentsPremitted_starts_with_i: String
  areTournamentsPremitted_not_starts_with_i: String
  areTournamentsPremitted_ends_with_i: String
  areTournamentsPremitted_not_ends_with_i: String
  areTournamentsPremitted_in: [String]
  areTournamentsPremitted_not_in: [String]
  isFourWheelDriveNeeded: String
  isFourWheelDriveNeeded_not: String
  isFourWheelDriveNeeded_contains: String
  isFourWheelDriveNeeded_not_contains: String
  isFourWheelDriveNeeded_starts_with: String
  isFourWheelDriveNeeded_not_starts_with: String
  isFourWheelDriveNeeded_ends_with: String
  isFourWheelDriveNeeded_not_ends_with: String
  isFourWheelDriveNeeded_i: String
  isFourWheelDriveNeeded_not_i: String
  isFourWheelDriveNeeded_contains_i: String
  isFourWheelDriveNeeded_not_contains_i: String
  isFourWheelDriveNeeded_starts_with_i: String
  isFourWheelDriveNeeded_not_starts_with_i: String
  isFourWheelDriveNeeded_ends_with_i: String
  isFourWheelDriveNeeded_not_ends_with_i: String
  isFourWheelDriveNeeded_in: [String]
  isFourWheelDriveNeeded_not_in: [String]
  extraRampDetails: String
  extraRampDetails_not: String
  extraRampDetails_contains: String
  extraRampDetails_not_contains: String
  extraRampDetails_starts_with: String
  extraRampDetails_not_starts_with: String
  extraRampDetails_ends_with: String
  extraRampDetails_not_ends_with: String
  extraRampDetails_i: String
  extraRampDetails_not_i: String
  extraRampDetails_contains_i: String
  extraRampDetails_not_contains_i: String
  extraRampDetails_starts_with_i: String
  extraRampDetails_not_starts_with_i: String
  extraRampDetails_ends_with_i: String
  extraRampDetails_not_ends_with_i: String
  extraRampDetails_in: [String]
  extraRampDetails_not_in: [String]

  """ condition must be true for all nodes """
  photo_every: RampImageWhereInput

  """ condition must be true for at least 1 node """
  photo_some: RampImageWhereInput

  """ condition must be false for all nodes """
  photo_none: RampImageWhereInput
}

input RampWhereUniqueInput {
  id: ID!
}

enum SortRampsBy {
  id_ASC
  id_DESC
  lake_ASC
  lake_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  costToLaunch_ASC
  costToLaunch_DESC
  bathrooms_ASC
  bathrooms_DESC
  numberOfRamps_ASC
  numberOfRamps_DESC
  trailerParkingSpots_ASC
  trailerParkingSpots_DESC
  areTournamentsPremitted_ASC
  areTournamentsPremitted_DESC
  isFourWheelDriveNeeded_ASC
  isFourWheelDriveNeeded_DESC
  extraRampDetails_ASC
  extraRampDetails_DESC
  photo_ASC
  photo_DESC
}

input RampUpdateInput {
  lake: LakeRelateToOneInput
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  costToLaunch: String
  bathrooms: String
  numberOfRamps: Int
  trailerParkingSpots: String
  areTournamentsPremitted: String
  isFourWheelDriveNeeded: String
  extraRampDetails: String
  photo: RampImageRelateToManyInput
}

input RampsUpdateInput {
  id: ID!
  data: RampUpdateInput
}

input RampCreateInput {
  lake: LakeRelateToOneInput
  name: String
  address: String
  address2: String
  city: String
  state: String
  zip: String
  costToLaunch: String
  bathrooms: String
  numberOfRamps: Int
  trailerParkingSpots: String
  areTournamentsPremitted: String
  isFourWheelDriveNeeded: String
  extraRampDetails: String
  photo: RampImageRelateToManyInput
}

input RampsCreateInput {
  data: RampCreateInput
}

input RampRelateToOneInput {
  create: RampCreateInput
  connect: RampWhereUniqueInput
  disconnect: RampWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type RampImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  ramp: Ramp
}

input RampImageWhereInput {
  AND: [RampImageWhereInput]
  OR: [RampImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  ramp: RampWhereInput
  ramp_is_null: Boolean
}

input RampImageWhereUniqueInput {
  id: ID!
}

enum SortRampImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  ramp_ASC
  ramp_DESC
}

input RampImageUpdateInput {
  image: Upload
  altText: String
  ramp: RampRelateToOneInput
}

input RampImagesUpdateInput {
  id: ID!
  data: RampImageUpdateInput
}

input RampImageCreateInput {
  image: Upload
  altText: String
  ramp: RampRelateToOneInput
}

input RampImagesCreateInput {
  data: RampImageCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Lake items which match the where clause. """
  allLakes(where: LakeWhereInput, search: String, sortBy: [SortLakesBy!], orderBy: String, first: Int, skip: Int): [Lake]

  """ Search for the Lake item with the matching ID. """
  Lake(where: LakeWhereUniqueInput!): Lake

  """ Perform a meta-query on all Lake items which match the where clause. """
  _allLakesMeta(where: LakeWhereInput, search: String, sortBy: [SortLakesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Lake list. """
  _LakesMeta: _ListMeta

  """ Search for all LakeImage items which match the where clause. """
  allLakeImages(where: LakeImageWhereInput, search: String, sortBy: [SortLakeImagesBy!], orderBy: String, first: Int, skip: Int): [LakeImage]

  """ Search for the LakeImage item with the matching ID. """
  LakeImage(where: LakeImageWhereUniqueInput!): LakeImage

  """ Perform a meta-query on all LakeImage items which match the where clause. 
  """
  _allLakeImagesMeta(where: LakeImageWhereInput, search: String, sortBy: [SortLakeImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the LakeImage list. """
  _LakeImagesMeta: _ListMeta

  """ Search for all Ramp items which match the where clause. """
  allRamps(where: RampWhereInput, search: String, sortBy: [SortRampsBy!], orderBy: String, first: Int, skip: Int): [Ramp]

  """ Search for the Ramp item with the matching ID. """
  Ramp(where: RampWhereUniqueInput!): Ramp

  """ Perform a meta-query on all Ramp items which match the where clause. """
  _allRampsMeta(where: RampWhereInput, search: String, sortBy: [SortRampsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Ramp list. """
  _RampsMeta: _ListMeta

  """ Search for all RampImage items which match the where clause. """
  allRampImages(where: RampImageWhereInput, search: String, sortBy: [SortRampImagesBy!], orderBy: String, first: Int, skip: Int): [RampImage]

  """ Search for the RampImage item with the matching ID. """
  RampImage(where: RampImageWhereUniqueInput!): RampImage

  """ Perform a meta-query on all RampImage items which match the where clause. 
  """
  _allRampImagesMeta(where: RampImageWhereInput, search: String, sortBy: [SortRampImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the RampImage list. """
  _RampImagesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Lake item. """
  createLake(data: LakeCreateInput): Lake

  """ Create multiple Lake items. """
  createLakes(data: [LakesCreateInput]): [Lake]

  """ Update a single Lake item by ID. """
  updateLake(id: ID!, data: LakeUpdateInput): Lake

  """ Update multiple Lake items by ID. """
  updateLakes(data: [LakesUpdateInput]): [Lake]

  """ Delete a single Lake item by ID. """
  deleteLake(id: ID!): Lake

  """ Delete multiple Lake items by ID. """
  deleteLakes(ids: [ID!]): [Lake]

  """ Create a single LakeImage item. """
  createLakeImage(data: LakeImageCreateInput): LakeImage

  """ Create multiple LakeImage items. """
  createLakeImages(data: [LakeImagesCreateInput]): [LakeImage]

  """ Update a single LakeImage item by ID. """
  updateLakeImage(id: ID!, data: LakeImageUpdateInput): LakeImage

  """ Update multiple LakeImage items by ID. """
  updateLakeImages(data: [LakeImagesUpdateInput]): [LakeImage]

  """ Delete a single LakeImage item by ID. """
  deleteLakeImage(id: ID!): LakeImage

  """ Delete multiple LakeImage items by ID. """
  deleteLakeImages(ids: [ID!]): [LakeImage]

  """ Create a single Ramp item. """
  createRamp(data: RampCreateInput): Ramp

  """ Create multiple Ramp items. """
  createRamps(data: [RampsCreateInput]): [Ramp]

  """ Update a single Ramp item by ID. """
  updateRamp(id: ID!, data: RampUpdateInput): Ramp

  """ Update multiple Ramp items by ID. """
  updateRamps(data: [RampsUpdateInput]): [Ramp]

  """ Delete a single Ramp item by ID. """
  deleteRamp(id: ID!): Ramp

  """ Delete multiple Ramp items by ID. """
  deleteRamps(ids: [ID!]): [Ramp]

  """ Create a single RampImage item. """
  createRampImage(data: RampImageCreateInput): RampImage

  """ Create multiple RampImage items. """
  createRampImages(data: [RampImagesCreateInput]): [RampImage]

  """ Update a single RampImage item by ID. """
  updateRampImage(id: ID!, data: RampImageUpdateInput): RampImage

  """ Update multiple RampImage items by ID. """
  updateRampImages(data: [RampImagesUpdateInput]): [RampImage]

  """ Delete a single RampImage item by ID. """
  deleteRampImage(id: ID!): RampImage

  """ Delete multiple RampImage items by ID. """
  deleteRampImages(ids: [ID!]): [RampImage]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
